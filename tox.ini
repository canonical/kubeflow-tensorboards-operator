# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[flake8]
max-line-length = 100

[tox]
skipsdist = True
envlist = {tensorboard-controller,tensorboards-web-app}-{lint,unit,integration}

[vars]
all_path = {[vars]src_path} {[vars]tst_path}
tst_path = {toxinidir}/tests/

[testenv]
basepython = python3
allowlist_externals = tox
passenv = 
	PYTHONPATH
	CHARM_BUILD_DIR
	MODEL_SETTINGS
	KUBECONFIG
ignore_errors = true
setenv = 
	PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]tst_path}
	PYTHONBREAKPOINT=ipdb.set_trace
	PY_COLORS=1
	tensorboard-controller: CHARM = tensorboard-controller
	tensorboards-web-app: CHARM = tensorboards-web-app
	lint: TYPE = lint
	unit: TYPE = unit
	integration: TYPE = integration
commands = 
	tox -c {toxinidir}/charms/{env:CHARM} -vve {env:TYPE} -- {posargs}
deps = 
	poetry>=2.1.3

[testenv:update-requirements]
commands = 
	# updating all groups' locked dependencies:
	poetry lock --regenerate
	# updating all groups' locked dependencies for every charm subfolder:
	find charms/ -maxdepth 1 -mindepth 1 -type d -exec bash -c "cd {} && poetry lock --regenerate" \;
description = Update requirements, including those in charm subfolders
allowlist_externals = find
skip_install = true

[testenv:fmt]
commands = 
	isort {[vars]tst_path}
	black {[vars]tst_path}
description = Apply coding style standards to code
commands_pre = 
	poetry install --only fmt
skip_install = true

[testenv:lint]
commands = 
	# uncomment the following line if this charm owns a lib
	# codespell {[vars]lib_path}
	codespell {toxinidir}/. --skip {toxinidir}/./.git --skip {toxinidir}/./.tox \
	--skip {toxinidir}/./build --skip {toxinidir}/./lib --skip {toxinidir}/./venv \
	--skip {toxinidir}/./.mypy_cache \
	--skip {toxinidir}/./charms \
	--skip {toxinidir}/./icon.svg --skip *.json.tmpl \
	--skip *.lock
	# pflake8 wrapper supports config from pyproject.toml
	pflake8 {[vars]tst_path}
	isort --check-only --diff {[vars]tst_path}
	black --check --diff {[vars]tst_path}
description = Check code against coding style standards
commands_pre = 
	poetry install --only lint
skip_install = true

[testenv:integration]
commands = pytest -v --tb native --asyncio-mode=auto {[vars]tst_path}integration --log-cli-level=INFO -s {posargs}
description = Run integration tests
commands_pre = 
	poetry install --only integration
skip_install = true
